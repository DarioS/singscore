% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CoreFuns.R
\name{projectScoreLandscape}
\alias{projectScoreLandscape}
\title{Project data on the landscape plot obtained from \code{plotScoreLandscape()}}
\usage{
projectScoreLandscape(plotObj = NULL, scoredf1, scoredf2, subSamples = NULL,
  sampleLabels = NULL, annot = NULL, isInteractive = FALSE)
}
\arguments{
\item{plotObj}{a dataframe, resulted from \code{\link[=plotScoreLandscape]{plotScoreLandscape()}}}

\item{scoredf1}{data.frame, result of the singscoring() function which scores
the gene expression matrix against a gene set of interest}

\item{scoredf2}{data.frame, result of the singscoring() function which scores
the gene expression matrix against another gene set of interest}

\item{subSamples}{vector of character or indices for subsetting the scoredfs,
default as NULL and all samples in scoredfs will be plotted}

\item{sampleLabels}{vector of character, sample names to display, ordered in
the same way as samples are ordered in the 'scoredf1' data matrix, default
as NULL which means points are labelled by sample names.}

\item{annot}{vector of characters, annotations to colour the data and should
have the sample length with sampleLabels.}

\item{isInteractive}{boolean, whether the plot is interactive default as
FALSE}
}
\value{
New data points on the already plotted ggplot object from
plotScoreLanscape()
}
\description{
This function takes the output (ggplot object) of the
\code{plotScoreLandscape()}  and a dataset. It projects the data onto the
ggplot object and returns a ggplot object with projected data points.
}
\examples{
ranked <- rankExpr(toy_expr)
scoredf1 <- singscoring(ranked, upSet = toy_up, downSet = toy_dn)
scoredf2 <- singscoring(ranked, upSet = toy_up)
psl <- plotScoreLandscape(scoredf1, scoredf2)
projectScoreLandscape(psl,scoredf1, scoredf2)
}
\seealso{
\code{\link[=plotScoreLandscape]{plotScoreLandscape()}}
}
