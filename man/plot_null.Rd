% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parPermu.R
\name{plot_null}
\alias{plot_null}
\title{Plot the empirical null distribution using the permutation result}
\usage{
plot_null(permuResult, scoredf, pvals, sampleLabel = NULL, alpha = 1,
  size = 1, textSize = 1, cutoff = 0.01)
}
\arguments{
\item{permuResult}{A matrix, outcome from function permuteNull()}

\item{scoredf}{A dataframe, outcome from function simplescore()}

\item{pvals}{A vector, outcome from function get_pval()}

\item{sampleLabel}{character, one sample label or multiple sample labels}

\item{alpha}{ggplot theme}

\item{size}{ggplot theme}

\item{textSize}{ggplot theme}

\item{cutoff}{double, the cutoff value for significant p values}
}
\description{
This function takes the result from function permuteNull(), plot the density
curve for the given samples and intercept the sample score on the x axis
}
\examples{
ranked <- rankGenes(toy_expr)
scoredf <- simpleScore(ranked, upSet = toy_up, downSet = toy_dn)
n_up = length(GSEABase::geneIds(toy_up))
n_down = length(GSEABase::geneIds(toy_dn))
#This permutation function can be run using parallel scripts, refer to the
#vignette for examples
#no_cores <- detectCores() - 1
#using parallel scripts
#cl <- makeCluster(no_cores)
#registerDoParallel(cl)
permuResult = permute_null(n_up = n_up, n_down = n_down, ranked, B = 10,
 seed = 1)
#stopCluster(cl)
#registerDoSEQ()
pvals <- get_pval(permuResult,scoredf)
plot_null(permuResult,scoredf,pvals,sampleLabel = names(pvals))
plot_null(permuResult,scoredf,pvals,sampleLabel = names(pvals)[1])
}
