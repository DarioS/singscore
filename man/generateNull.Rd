% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generatNullGeneric.R
\name{generateNull}
\alias{generateNull}
\alias{generateNull,vector,ANY-method}
\alias{generateNull,GeneSet,ANY-method}
\alias{generateNull,vector,vector-method}
\alias{generateNull,GeneSet,GeneSet-method}
\title{Permutation test for the derived scores of each sample}
\usage{
generateNull(
  upSet,
  downSet = NULL,
  rankData,
  subSamples = NULL,
  centerScore = TRUE,
  knownDirection = TRUE,
  B = 1000,
  ncores = 1,
  seed = sample.int(1e+06, 1),
  useBPPARAM = NULL
)

\S4method{generateNull}{vector,ANY}(
  upSet,
  downSet = NULL,
  rankData,
  subSamples = NULL,
  centerScore = TRUE,
  knownDirection = TRUE,
  B = 1000,
  ncores = 1,
  seed = sample.int(1e+06, 1),
  useBPPARAM = NULL
)

\S4method{generateNull}{GeneSet,ANY}(
  upSet,
  downSet = NULL,
  rankData,
  subSamples = NULL,
  centerScore = TRUE,
  knownDirection = TRUE,
  B = 1000,
  ncores = 1,
  seed = sample.int(1e+06, 1),
  useBPPARAM = NULL
)

\S4method{generateNull}{vector,vector}(
  upSet,
  downSet = NULL,
  rankData,
  subSamples = NULL,
  centerScore = TRUE,
  knownDirection = TRUE,
  B = 1000,
  ncores = 1,
  seed = sample.int(1e+06, 1),
  useBPPARAM = NULL
)

\S4method{generateNull}{GeneSet,GeneSet}(
  upSet,
  downSet = NULL,
  rankData,
  subSamples = NULL,
  centerScore = TRUE,
  knownDirection = TRUE,
  B = 1000,
  ncores = 1,
  seed = sample.int(1e+06, 1),
  useBPPARAM = NULL
)
}
\arguments{
\item{upSet}{A GeneSet object or character vector of gene IDs of up-regulated
gene set or a gene set where the nature of genes is not known}

\item{downSet}{A GeneSet object or character vector of gene IDs of
down-regulated gene set or NULL where only a single gene set is provided}

\item{rankData}{A matrix object, ranked gene expression matrix data generated
using the \code{\link[=rankGenes]{rankGenes()}} function (make sure this matrix is not modified, see
details)}

\item{subSamples}{A vector of sample labels/indices that will be used to
subset the rankData matrix. All samples will be scored if not provided}

\item{centerScore}{A Boolean, specifying whether scores should be centered
around 0, default as TRUE. Note: scores never centered if \code{knownDirection = FALSE}}

\item{knownDirection}{A boolean, determining whether the gene set should be
considered to be directional or not. A gene set is directional if the type
of genes in it are known i.e. up- or down-regulated. This should be set to
TRUE if the gene set is composed of both up- AND down-regulated genes.
Defaults to TRUE. This parameter becomes irrelevant when both upSet(Colc)
and downSet(Colc) are provided.}

\item{B}{integer, the number of permutation repeats or the number of random
gene sets to be generated, default as 1000}

\item{ncores, }{integer, the number of CPU cores the function can use}

\item{seed}{integer, set the seed for randomisation}

\item{useBPPARAM, }{the backend the function uses, if NULL is provided, the
function uses the default parallel backend which is the first on the list
returned by \code{BiocParallel::registered()} i.e
\code{BiocParallel::registered()[[1]]} for your machine. It can be changed
explicitly by passing a BPPARAM}
}
\value{
A matrix of empirical scores for all samples
}
\description{
This function generates a number of random gene sets that
have the same number of genes as the scored gene set. It scores each random
gene set and returns a matrix of scores for all samples.
The empirical scores are used to calculate the empirical p-values and plot
the null distribution. The implementation uses \code{\link[BiocParallel:bplapply]{BiocParallel::bplapply()}}
for easy access to parallel backends. Note that one should pass the same
values to the \code{upSet}, \code{downSet}, \code{centerScore} and \code{bidirectional}
arguments as what they provide for the \code{simpleScore()} function to generate
a proper null distribution.
}
\examples{
ranked <- rankGenes(toy_expr_se)
scoredf <- simpleScore(ranked, upSet = toy_gs_up, downSet = toy_gs_dn)

# find out what backends can be registered on your machine
BiocParallel::registered()
# the first one is the default backend
# ncores = ncores <- parallel::detectCores() - 2
permuteResult = generateNull(upSet = toy_gs_up, downSet = toy_gs_dn, ranked,
centerScore = TRUE, B =10, seed = 1, ncores = 1 )
}
\seealso{
\href{http://lcolladotor.github.io/2016/03/07/BiocParallel/#.WgXMF61L28U}{Post about BiocParallel}
\code{browseVignettes("BiocParallel")}
}
\author{
Ruqian Lyu
}
